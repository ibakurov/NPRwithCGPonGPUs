
parent.0 = simple.params

stat.file = $out.stat

generations = 7000

#================================================================================
# Set up 1+4 evolutionary strategy
#================================================================================
breed = ec.cgp.MuLambdaBreederCGP
es.mu.0 = 1
es.lambda.0 = 4
pop.subpops = 1
pop.subpop.0 = ec.Subpopulation
pop.subpop.0.size = 5
pop.subpop.0.species = ec.cgp.representation.FloatVectorSpecies
pop.subpop.0.species.ind = ec.cgp.representation.FloatVectorIndividual
pop.subpop.0.species.fitness = ec.cgp.FitnessCGP
pop.subpop.0.species.mutation-prob = .04
pop.subpop.0.species.pipe = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.0 = ec.cgp.ESSelectionCGP

#=============================
#Tournament selection
#=============================

#breed = ec.cgp.Breeder
#pop.subpops = 1
#pop.subpop.0 = ec.Subpopulation
#pop.subpop.0.size = 500
#pop.subpop.0.species = ec.cgp.representation.FloatVectorSpecies
#pop.subpop.0.species.ind = ec.cgp.representation.FloatVectorIndividual
#pop.subpop.0.species.fitness = ec.cgp.FitnessCGP
#pop.subpop.0.species.mutation-prob = .04
#pop.subpop.0.species.pipe = ec.vector.breed.VectorMutationPipeline
#pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
#pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
#pop.subpop.0.species.pipe.source.0.source.0.size = 4
#pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
#pop.subpop.0.species.pipe.source.0.source.1.size = 4

#================================================================================
# Function lookup table class for use by the CGP function evaluator.
# This class is expected to implement CGPFunctions.
#================================================================================
pop.subpop.0.species.functions = ec.cgp.functions.FunctionsComputerVision

# number of functions in lookup table
pop.subpop.0.species.num-functions = 22

# number of nodes in CGP, not including inputs and outputs.
pop.subpop.0.species.nodes = 100

# number of input nodes in CGP.  Your problem class feeds these inputs to the CGPEvaluator. 
# 9 inputs
pop.subpop.0.species.inputs = 31

# number of output nodes in your CGP.  Your problem class extracts these outputs from the CGPEvaluator.
pop.subpop.0.species.outputs = 6

# max number of inputs for all functions in your function lookup table.
pop.subpop.0.species.maxArity = 4

# number of ephemeral random constants, C, to use in your CGP.  They are generated before the run, and are placed in the last C slots of the input vector. 
# Ensure that this value is not greater than the number of the inputs!
problem.constants = 0

# Define the range of constant values.  It is the half-open range [constant-min, constant-max).
problem.constant-min = 0.0
problem.constant-max = 0.0

#================================================================================
# Our custom stats class prints out newly discovered best-of run individuals
# as they are discovered.
#================================================================================
stat = ec.cgp.Stats

#================================================================================
# Set up parameters shared by all experiments.
#================================================================================

# I log a lot of messages, so we want to avoid storing these in memory.
nostore = true 				

#If true, going to print all params
print-params = false

######################
##	EVAL STUFF
######################

eval = ec.multiobjective.SumOfRanksEvaluator

pop.subpop.0.species.fitness                = ec.multiobjective.SumOfRanksFitness
pop.subpop.0.species.fitness.showraw        = false
pop.subpop.0.species.fitness.normalize      = true
pop.subpop.0.species.fitness.num-objectives = 5

pop.subpop.0.species.fitness.0.name         = MEAN
pop.subpop.0.species.fitness.0.weight       = 1
pop.subpop.0.species.fitness.0.maximize     = false

pop.subpop.0.species.fitness.1.name         = SD
pop.subpop.0.species.fitness.1.weight       = 1
pop.subpop.0.species.fitness.1.maximize     = false

pop.subpop.0.species.fitness.2.name         = DFN
pop.subpop.0.species.fitness.2.weight       = 1
pop.subpop.0.species.fitness.2.maximize     = false

pop.subpop.0.species.fitness.3.name         = CHISTQ
pop.subpop.0.species.fitness.3.weight       = 1
pop.subpop.0.species.fitness.3.maximize     = false

pop.subpop.0.species.fitness.4.name         = LUM
pop.subpop.0.species.fitness.4.weight       = 1
pop.subpop.0.species.fitness.4.maximize     = false

######################
##	CUDA STUFF
######################

eval.problem = main.NPRWithCGPOnGPUsProblem
eval.problem.data = main.MainRecord

cuda.kernel.input.size = 34
cuda.kernel.input.0.name = x
cuda.kernel.input.0.type = int*
cuda.kernel.input.1.name = y
cuda.kernel.input.1.type = int*
cuda.kernel.input.2.name = redInput
cuda.kernel.input.2.type = float*
cuda.kernel.input.3.name = greenInput
cuda.kernel.input.3.type = float*
cuda.kernel.input.4.name = blueInput
cuda.kernel.input.4.type = float*
cuda.kernel.input.5.name = redCanvas
cuda.kernel.input.5.type = float*
cuda.kernel.input.6.name = greenCanvas
cuda.kernel.input.6.type = float*
cuda.kernel.input.7.name = blueCanvas
cuda.kernel.input.7.type = float*
cuda.kernel.input.8.name = opacity
cuda.kernel.input.8.type = float*
cuda.kernel.input.9.name = exp1
cuda.kernel.input.9.type = int*
cuda.kernel.input.10.name = exp2
cuda.kernel.input.10.type = int*
cuda.kernel.input.11.name = exp3
cuda.kernel.input.11.type = int*
cuda.kernel.input.12.name = luminance
cuda.kernel.input.12.type = float*
cuda.kernel.input.13.name = ERC
cuda.kernel.input.13.type = float*
cuda.kernel.input.14.name = mean5x5
cuda.kernel.input.14.type = float*
cuda.kernel.input.15.name = mean7x7
cuda.kernel.input.15.type = float*
cuda.kernel.input.16.name = mean9x9
cuda.kernel.input.16.type = float*
cuda.kernel.input.17.name = mean11x11
cuda.kernel.input.17.type = float*
cuda.kernel.input.18.name = mean13x13
cuda.kernel.input.18.type = float*
cuda.kernel.input.19.name = std5x5
cuda.kernel.input.19.type = float*
cuda.kernel.input.20.name = std7x7
cuda.kernel.input.20.type = float*
cuda.kernel.input.21.name = std9x9
cuda.kernel.input.21.type = float*
cuda.kernel.input.22.name = std11x11
cuda.kernel.input.22.type = float*
cuda.kernel.input.23.name = std13x13
cuda.kernel.input.23.type = float*
cuda.kernel.input.24.name = min5x5
cuda.kernel.input.24.type = float*
cuda.kernel.input.25.name = min7x7
cuda.kernel.input.25.type = float*
cuda.kernel.input.26.name = min9x9
cuda.kernel.input.26.type = float*
cuda.kernel.input.27.name = min11x11
cuda.kernel.input.27.type = float*
cuda.kernel.input.28.name = min13x13
cuda.kernel.input.28.type = float*
cuda.kernel.input.29.name = max5x5
cuda.kernel.input.29.type = float*
cuda.kernel.input.30.name = max7x7
cuda.kernel.input.30.type = float*
cuda.kernel.input.31.name = max9x9
cuda.kernel.input.31.type = float*
cuda.kernel.input.32.name = max11x11
cuda.kernel.input.32.type = float*
cuda.kernel.input.33.name = max13x13
cuda.kernel.input.33.type = float*

cuda.kernel.output.class = main.OutputData
cuda.kernel.output.name = output
cuda.kernel.output.type = float*

#jobs = 10

evalthreads = 				1
breedthreads = 				1

seed.0 = 1309

quit-on-run-complete = false

